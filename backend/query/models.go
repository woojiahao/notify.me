// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0

package query

import (
	"database/sql"
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"time"

	"github.com/google/uuid"
)

type UserProjectRole string

const (
	UserProjectRoleAdmin  UserProjectRole = "admin"
	UserProjectRoleMember UserProjectRole = "member"
	UserProjectRoleViewer UserProjectRole = "viewer"
)

func (e *UserProjectRole) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserProjectRole(s)
	case string:
		*e = UserProjectRole(s)
	default:
		return fmt.Errorf("unsupported scan type for UserProjectRole: %T", src)
	}
	return nil
}

type NullUserProjectRole struct {
	UserProjectRole UserProjectRole
	Valid           bool // Valid is true if UserProjectRole is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserProjectRole) Scan(value interface{}) error {
	if value == nil {
		ns.UserProjectRole, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserProjectRole.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserProjectRole) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UserProjectRole), nil
}

type Collection struct {
	ID               uuid.UUID
	Name             string
	EntryIdentifiers []string
	ProjectID        uuid.UUID
	Columns          []string
}

type Entry struct {
	ID           uuid.UUID
	Contents     json.RawMessage
	CollectionID uuid.UUID
}

type Project struct {
	ID        uuid.UUID
	Name      string
	CreatedBy uuid.UUID
	CreatedAt time.Time
	UpdatedBy uuid.NullUUID
	UpdatedAt sql.NullTime
}

type User struct {
	ID           uuid.UUID
	Name         string
	Email        string
	PasswordHash string
}

type UserProject struct {
	UserID    uuid.UUID
	ProjectID uuid.UUID
	Role      UserProjectRole
}
